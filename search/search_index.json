{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#homepage","title":"Homepage","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"git/advanced/","title":"advanced","text":""},{"location":"git/advanced/#generate-new-ssh-key","title":"Generate new ssh key","text":"<p>ssh-keygen -t ed25519 -C \"your_email@example.com\"</p>"},{"location":"git/advanced/#ssh-related-files","title":"ssh related files","text":"<ul> <li>~/.ssh/config</li> <li>~/.ssh/id_ed25519</li> <li>~/.ssh/id_ed25519.pub</li> </ul> <p>When you generate new SSH keys using ssh-keygen and change the default key name, the keys are saved in the directory you specify. If you don't specify a directory, the keys are saved in the current working directory.</p>"},{"location":"git/advanced/#contents-of-sshconfig","title":"Contents of ~/.ssh/config","text":"<pre><code>Host *\n   AddKeysToAgent yes\n   UseKeychain yes\n   IdentityFile ~/.ssh/id_ed25519\n</code></pre>"},{"location":"git/advanced/#multiple-github-account-in-a-single-machine","title":"Multiple github account in a single machine","text":"<pre><code># Default GitHub account (Old account, if any)\nHost github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519\n\n# New GitHub account\nHost github.com-personal\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519_personal\n</code></pre> <p><code>git remote set-url origin git@github.com-personal:abhishekghoshh/github-helper.git</code></p> <p><code>git clone git@github.com-personal:abhishekghoshh/github-helper.git</code></p> <p>Also set the git config user.email and user.name otherwise it will take the default</p>"},{"location":"git/advanced/#check-ssh-configuration-is-correct-or-not","title":"Check ssh configuration is correct or not","text":"<pre><code>ssh -T git@github.com\nssh -T git@github.com-personal\n</code></pre>"},{"location":"git/advanced/#to-check-ssh-key-list","title":"To check ssh key list","text":"<pre><code>ssh-add -l\n</code></pre>"},{"location":"git/advanced/#to-add-a-key-in-ssh-key-set","title":"To add a key in ssh key set","text":"<pre><code>ssh-add  ~/.ssh/id_ed25519_personal\n</code></pre>"},{"location":"git/advanced/#while-git-push-using-git-ssh-if-you-see-it-is-showing-other-user-and-it-has-no-accesswhich-is-normal-change-the-git-remote-url","title":"while git push using git ssh if you see it is showing other user and it has no access(which is normal) change the git remote url","text":""},{"location":"git/advanced/#working-with-git-sha-and-blob-files","title":"Working with git sha and blob files","text":"<pre><code># get SHA1 for a file\nget ls-files -s\n\n# get type of object (blob or tree)\ngit cat-file -t  SHA1 for Object\n\n# get size of Object (blob or tree)\ngit cat-file -s SHA1 for Object\n\n# get content of the Object (blob or tree)\ngit cat-file -p SHA1 for Object\n\n# Shows the details of a specific commit, including its changes.\ngit show\n\n# Display content of commit\ngit show sha1 of commit\n</code></pre>"},{"location":"git/branching/","title":"branching","text":""},{"location":"git/branching/#git-branching-model","title":"Git branching model","text":"<pre><code># List all branches\ngit branch\ngit branch --list\n\n# List all branches with remote branches\ngit branch -a\n\n# How to create a new branch in Git:\n# By default, you have one branch, the main branch. With this command, you can create a new branch. \n# Git won't switch to it automatically - you will need to do it manually with the next command.\n\ngit branch branch_name\n\n# How to list branches in Git:\n# You can view all created branches using the git branch command. \n# It will show a list of all branches and mark the current branch with an asterisk and highlight it in green.\n\ngit branch\n\n# How to delete a branch in Git:\n# When you are done working with a branch and have merged it, you can delete it using the command below\n# Remove selected branch, if it is already merged into any other. (-D instead of -d forces deletion.)\n\ngit branch -d branch_name\n\n# Force delete a local branch (whether merged or unmerged)\ngit branch -D &lt;branch&gt;\n\n# Rename the current branch to &lt;new_name&gt;\ngit branch -m &lt;new_name&gt;\n\n# How to check remote branches that Git is tracking:\n# This command shows the name of all remote branches that Git is tracking for the current repository:\ngit branch -r\n\n# display list commit in different branches\ngit branch -v\n\n# display tracked branches\ngit branch -vv\n</code></pre>"},{"location":"git/branching/#switch-branches","title":"Switch branches","text":"<pre><code># How to switch to a newly created branch in Git:\n# When you want to use a different or a newly created branch you can use this command:\n\ngit checkout branch_name\ngit switch branch_name\n\n# How to create a branch in Git and switch to it immediately.\n# In a single command, you can create and switch to a new branch right away.\n\ngit checkout -b branch_name\n\n# Checking out (switching to) older commits. Checks out the third-to-last commit\ngit checkout HEAD~3\n\n# Checking out (switching to) older commits\ngit checkout &lt;commit_id&gt;\n\n# How to revert unstaged changes in Git:\ngit checkout filename\n</code></pre>"},{"location":"git/branching/#how-to-merge-two-branches-in-git","title":"How to merge two branches in Git","text":"<pre><code># To merge the history of the branch you are currently in with the branch_name, you will need to use the command below:\n# Merging a branch into the main branch\n# Join specified [branch_name] branch into your current branch (the one you are on currently).\n\ngit checkout main\ngit merge branch_name\n\n# Merging a branch and creating a commit message\ngit merge --no-ff &lt;other_branch&gt;\n\n# How to abort a conflicting merge in Git:\n# If you want to throw a merge away and start over, you can run the following command:\n\ngit merge --abort\n</code></pre>"},{"location":"git/cloning/","title":"cloning","text":""},{"location":"git/cloning/#git-clone","title":"Git clone","text":"<p>Clone a repository from remote hosts (GitHub, GitLab, DagsHub, etc.) </p><pre><code>git clone &lt;remote_repo_url&gt;\n</code></pre> <p>using https link </p><pre><code>git clone https://github.com/your_username/repo_name.git\n</code></pre> <p>using ssh link </p><pre><code>git clone git@github.com:user_name/repo_name.git\n</code></pre> <p>Clone only a specific branch </p><pre><code>git clone -branch &lt;branch_name&gt; &lt;repo_url&gt;\n</code></pre> <p>Cloning into a specified directory </p><pre><code>git clone &lt;repo_url&gt; &lt;dir_name&gt;\n</code></pre>"},{"location":"git/commits/","title":"commits","text":""},{"location":"git/commits/#how-to-commit-changes-in-the-editor-in-git","title":"How to commit changes in the editor in Git:","text":"<pre><code># This command will open a text editor in the terminal where you can write a full commit message.\n# A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it.\ngit commit\n\n# How to commit changes with a message in Git:\n# You can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message.\ngit commit -m \"your commit message here\"\n\n# How to commit changes (and skip the staging area) in Git:\n# You can add and commit tracked files with a single command by using the -a and -m options or -am option.\ngit commit -a -m \"your commit message here\"\ngit commit -am \"your commit message here\"\n\n# How to amend the most recent commit in Git, --amend` allows you to modify and add changes to the most recent commit\n# edit commit message. Replace the last commit with the staged changes and last commit\n# combined. Use with nothing staged to edit the last commit's message\n\ngit commit --amend\ngit commit --amend -m \"[New commit message]\"\n\n!!Note!!: fixing up a local commit with amend is great and you can push it to a shared repository after you've fixed it. \n# But you should avoid amending commits that have already been made public.\n\n# Creates a new note and associates it with an object (commit, tag, etc.).\ngit notes add\n</code></pre>"},{"location":"git/commits/#how-to-see-a-specific-commit-in-git","title":"How to see a specific commit in Git:","text":"<pre><code># This command shows a specific commit.\n# Replace commit-id with the id of the commit that you find in the commit log after the word commit.\n\ngit show commit-id\n\n# show any object in Git in human-readable format\ngit show [SHA]\n</code></pre>"},{"location":"git/commits/#temporary-commitstemporarily-store-modified-tracked-files-in-order-to-change-branches","title":"TEMPORARY COMMITS(Temporarily store modified, tracked files in order to change branches())","text":"<pre><code># Saving staged and unstaged changes to stash for a later use (see below for the explanation of a stash)\n# Put current changes in your working directory into stash for later use.\ngit stash\n\n# Stashing staged, unstaged and untracked files as well\ngit stash -u\n\n# Stashing everything (including ignored files)\ngit stash --all\n\n# Reapply previously stashed changes and empty the stash\n# Apply stored stash content into working directory, and clear stash.\ngit stash pop\n\n# Reapply previously stashed changes and keep the stash\ngit stash apply\n\n# Dropping changes in the stash, discard the changes from top of stash stack\n# Delete a specific stash from all your previous stashes.\ngit stash drop\n\n# Lists all stashes in the repository.\ngit stash list\n</code></pre>"},{"location":"git/commits/#how-to-rollback-to-previous-commit","title":"How to rollback to previous commit","text":"<pre><code># git revert will create a new commit that is the opposite of everything in the given commit.\n# We can revert the latest commit by using the head alias like this:\n\ngit revert HEAD\n\n# How to rollback an old commit in Git. You can revert an old commit using its commit id. \n# This opens the editor so you can add a commit message. Undo a single given commit, \n# without modifying commits that come after it (a safe reset) May result in revert conflicts\n# Create a new commit, reverting changes from the specified commit. It generates an inversion of changes. \n\ngit revert comit_id_here\n\n\n# Undoes the changes introduced by the specified commit, but does not create a new commit.\ngit revert -no-commit &lt;commit&gt; \n\n# Shows which files would be removed from working directory. Use the -f flag in place of the -n flag to execute the clean.\ngit clean -n\n</code></pre>"},{"location":"git/configurations/","title":"configurations","text":""},{"location":"git/configurations/#git-configurations","title":"Git configurations","text":""},{"location":"git/configurations/#check-if-installation-is-successful-on-any-platform","title":"Check if installation is successful on any platform","text":"<pre><code>git --version\n</code></pre>"},{"location":"git/configurations/#ignoring-files","title":"Ignoring files","text":"<p>Create a .gitignore file and commit it. show all commit logs with indication of any paths that moved   To ignore files, create a .gitignore file in your repository with a line for each pattern.   File ignoring will work for the current and sub directories where .gitignore file is placed. In this example, all files are ignored in the logs directory (excluding the .gitkeep file), whole tmp directory and all files *.swp.  </p> <pre><code>logs/\n*.notes\npattern*/\n/logs *\n!logs/.gitkeep\n/tmp\n*.swp\nEOF\n</code></pre>"},{"location":"git/configurations/#commands-for-viewing-and-modifying-git-configurations","title":"Commands for viewing and modifying git configurations","text":"<p>system wide ignore patern for all local repositories </p><pre><code>git config --global core.excludesfile [file]\n</code></pre> <p>How to check your Git configuration:  The command below returns a list of information about your git configuration including user name and email:  </p><pre><code>git config -l / git config --list\n</code></pre> <p>Get the value of a single key </p><pre><code>git config --get &lt;key&gt;\n</code></pre> <p>Configure your email </p><pre><code>git config user.email [your.email@domain.com]\n</code></pre> <p>Configure your name </p><pre><code>git config user.name [your-name]\n</code></pre> <p>How to setup your Git username:  With the command below you can configure your user name:  </p><pre><code>git config --global user.name \"Abhishek Ghosh\"\n</code></pre> <p>How to setup your Git user email:  This command lets you setup the user email address you'll use in your commits.   All git projects under the current user   </p><pre><code>git config --global user.email \"abhishek.ghosh@gmail.com\"\n</code></pre> <p>Local directory, single project (this is the default tag)  </p><pre><code>git config --local user.email \"my_email@example.com\"\n</code></pre> <p>For all users on the current machine  </p><pre><code>git config --system user.email \"my_email@example.com\"\n</code></pre> <p>set automatic command line coloring for Git for easy reviewing, set automatic command line coloring for Git for easy reviewing </p><pre><code>git config --global color.ui auto\n</code></pre> <p>How to cache your login credentials in Git:  You can store login credentials in the cache so you don't have to type them in each time. Just use this command:  </p><pre><code>git config --global credential.helper cache\n</code></pre> <p>Create shortcut for a Git command. E.g. alias.glog \"log --graph --oneline\" will set \"git glog\" equivalent to \"git log --graph --oneline.  </p><pre><code>git config --global alias. &lt;alias-name&gt; &lt;git-command&gt;\n</code></pre> <p>Create an alias named gc for the <code>git commit</code> command </p><pre><code>git config --global alias.gc commit\ngc -m \"New commit\"\n</code></pre> <p>Create an alias named ga for the <code>git add</code> command </p><pre><code>git config --global alias.ga add\n</code></pre> <p>Set text editor used by commands for all users on the machine.  arg should be the command that launches the desired editor (e.g., vi). <pre><code>git config --system core.editor &lt;editor&gt;\n</code></pre></p> <p>Open the global configuration file in a text editor for manual editing. </p><pre><code>git config --global --edit\n</code></pre>"},{"location":"git/intialization/","title":"initialization","text":""},{"location":"git/intialization/#git-project-initialization","title":"Git project initialization","text":"<p>How to initialize a Git repo:  Everything starts from here. The first step is to initialize a new Git repo locally in your project root.  You can do so with the command below  </p><pre><code>git init\n</code></pre> <p>Create a git-tracked repository inside a new directory </p><pre><code>git init [dir_name]\n</code></pre>"},{"location":"git/intialization/#add-a-remote-repository-in-git","title":"Add a remote repository in Git","text":"<p>Display if the repo is from the remote </p><pre><code>git remote\n</code></pre> <p>How to see remote URLs in Git:  You can see all remote repositories for your local repository with this command:  </p><pre><code>git remote -v\n</code></pre> <p>This command adds a remote repository to your local repository (just replace <code>&lt;url_to_remote&gt;</code> with your remote repo URL). </p><pre><code>git remote add &lt;remote&gt; &lt;url_to_remote&gt;\ngit remote add origin &lt;http or ssh url&gt;\n</code></pre> <p>How to get more info about a remote repo in Git:  Just replace origin with the name of the remote obtained by running the git remote -v command.  </p><pre><code>git remote show origin\n</code></pre> <p>Remove a connection to a remote repo called  <pre><code>git remote rm &lt;remote&gt;\n</code></pre></p> <p>Rename a remote connection </p><pre><code>git remote rename &lt;old_name&gt; &lt;new_name&gt;\n</code></pre> <p>To get the contents of remote branches in Git without automatically merging:  This lets you update the remote without merging any content into the local branches.  You can call git merge or git checkout to do the merge.  </p><pre><code>git remote update\n</code></pre>"},{"location":"git/introduction/","title":"introduction","text":""},{"location":"git/introduction/#introduction","title":"Introduction","text":"<p>Git is a distributed version control system that helps developers collaborate on projects of any scale. Linus Torvalds, the developer of the Linux kernel, created Git in 2005 to help control the Linux kernel's development.</p>"},{"location":"git/introduction/#what-is-a-distributed-version-control-system","title":"What is a Distributed Version Control System?","text":"<p>A distributed version control system is a system that helps you keep track of changes you've made to files in your project. This change history lives on your local machine and lets you revert to a previous version of your project with ease in case something goes wrong. Git makes collaboration easy. Everyone on the team can keep a full backup of the repositories they're working on on their local machine. Then, thanks to an external server like BitBucket, GitHub or GitLab, they can safely store the repository in a single place. This way, different members of the team can copy it locally and everyone has a clear overview of all changes made by the whole team. Git has many different commands you can use. And I've found that these fifty are the ones I use the most often (and are therefore the most helpful to remember).</p>"},{"location":"git/introduction/#basic-definitions","title":"Basic definitions","text":"<ul> <li>git: an open source, distributed version-control system</li> <li>GitHub:  a platform for hosting and collaborating on Git repositories</li> <li>Commit: a state of the code base. A snapshot of the project you can come back to. A Git object, a snapshot of your entire repository compressed into a SHA</li> <li>Branch: A copy of the project used for working in an isolated environment without affecting the main project. a reference to a commit; can have a tracked upstream. A lightweight movable pointer to a commit</li> <li>Local repo or repository: A local directory containing code and files for the project</li> <li>Remote: An online version of the local repository hosted on services like GitHub, GitLab, and BitBucket. A common repository on GitHub that all team member use to exchange their changes</li> <li>Clone: The act of making a clone or copy of a repository in a new directory. A local version of a repository, including all commits and branches</li> <li>fork: A copy of a repository on GitHub owned by a different user</li> <li>Git merge: The process of combining two branches together</li> <li>pull request: a place to compare and discuss the differences introduced on a branch with reviews, comments, integrated tests, and more</li> <li>HEAD: representing your current working directory, the HEAD pointer can be moved to different branches, tags, or commits</li> <li>Tag: a reference (standard) or an object (annotated)</li> </ul>"},{"location":"git/introduction/#more-advanced-definitions","title":"More advanced definitions","text":"<ul> <li>.gitignore file: A file that lists other files you want git not to track (e.g. large data folders, private info, and any local files that shouldn't be seen by the public.)</li> <li>Staging area: a cache that holds changes you want to commit next.</li> <li>Git stash: another type of cache that holds unwanted changes you may want to come back later</li> <li>Commit ID or hash: a unique identifier for each commit, used for switching to different save points.</li> <li>HEAD (always capitalized letters): a reference name for the latest commit, to save you having to type Commit IDs. HEAD\\~n syntax is used to refer to older commits (e.g. HEAD\\~2 refers to the second-to-last commit).</li> <li>ssh authentication: You can access and write data in repositories  on github.com using the ssh(Secure shell protocol). When you connect via ssh, you authenticate using a private key file saved on your local machine.</li> </ul>"},{"location":"git/introduction/#what-is-a-branch","title":"What is a Branch?","text":"<p>Branches are special \"copies\" of the code base which allow you to work on different parts of a project and new features in an isolated environment. Changes made to the files in a branch won't affect the \"main branch\" which is the main project development channel.</p>"},{"location":"git/introduction/#what-is-a-repository","title":"What is a repository?","text":"<p>A repository or a repo is any location that stores code and the necessary files that allow it to run without errors. A repo can be both local and remote. A local repo is typically a directory on your machine while a remote repo is hosted on servers like GitHub</p>"},{"location":"git/introduction/#a-note-on-cloning","title":"A note on cloning","text":"<p>There are two primary methods of cloning a repository - HTTPS syntax and SSH syntax. While SSH cloning is generally considered a bit more secure because you have to use an SSH key for authentication, HTTPS cloning is much simpler and the recommended cloning option by GitHub.</p> <p>HTTPS : <code>git clone https://github.com/your_username/repo_name.git</code> SSH : <code>git clone git@github.com:user_name/repo_name.git</code></p>"},{"location":"git/links/","title":"links","text":""},{"location":"git/links/#git-helper","title":"git Helper","text":""},{"location":"git/links/#readme-viewer-online","title":"readme viewer online","text":""},{"location":"git/links/#online-resources","title":"Online resources","text":"<ul> <li>How Git Version Control Works?</li> <li>Learn git concepts, not commands</li> <li>Syncing a fork</li> <li>git-flight-rules</li> <li>pro git book</li> <li>GitHub flow</li> <li>What is Git and Github?</li> </ul>"},{"location":"git/links/#git-cheetsheets","title":"git cheetsheets","text":"<ul> <li>Learn Git Fundamentals - A Handbook on Day-to-Day Development Tasks</li> <li>How to Use Git and GitHub - a Guide for Beginners and Experienced Developers</li> </ul>"},{"location":"git/links/#youtube-and-udemy-tutorials","title":"Youtube and udemy tutorials","text":""},{"location":"git/links/#introduction","title":"Introduction","text":"<ul> <li>Git Explained in 100 Seconds</li> <li>Git It? How to use Git and Github</li> <li>GitHub Pull Request in 100 Seconds - Git a FREE sticker \ud83d\udd25</li> <li>Git and GitHub for Beginners - Crash Course</li> <li>GIT - Complete Course Tutorial</li> </ul>"},{"location":"git/links/#intermediate","title":"Intermediate","text":"<ul> <li>Git Stash In 5 Minutes</li> <li>Git MERGE vs REBASE<ul> <li>Git MERGE vs REBASE: Everything You Need to Know</li> <li>Git MERGE vs REBASE</li> </ul> </li> <li>Difference between git PULL and git FETCH</li> <li>Git</li> <li>Git for Professionals Tutorial - Tools &amp; Concepts for Mastering Version Control with Git</li> </ul>"},{"location":"git/links/#advanced","title":"Advanced","text":"<ul> <li>How Git Works: Explained in 4 Minutes</li> <li>13 Advanced (but useful) Git Techniques and Shortcuts</li> <li>Git's Best And Most Unknown Feature</li> <li>How to be a git expert</li> <li>Advanced Git Tutorial - Interactive Rebase, Cherry-Picking, Reflog, Submodules and more</li> <li>How GIT works under the HOOD?</li> </ul>"},{"location":"git/links/#some-other-tutorial-and-videos","title":"Some other tutorial and videos","text":"<ul> <li>lazygit</li> <li>LazyGit makes you 10x faster while using Git.</li> <li>I'm never using Git the same way again<ul> <li>Neovim and Git: SOLVED</li> </ul> </li> <li>15 Lazygit Features In Under 15 Minutes</li> <li>Git's Best And Most Unknown Feature</li> </ul>"},{"location":"git/links/#udemy","title":"Udemy","text":"<ul> <li>Master Git and GitHub in 5 Days: Go from Zero to Hero</li> <li>The Git &amp; Github Bootcamp</li> </ul>"},{"location":"git/logs/","title":"logs","text":""},{"location":"git/logs/#git-log","title":"Git log","text":"<pre><code># How to see your commit history in Git:\n# This command shows the commit history for the current repository:\ngit log\n</code></pre> <pre><code># Only display commits that have the specified file.\ngit log -- &lt;file&gt;\n</code></pre> <pre><code># List commit history of current branch. -n count limits list to last n commits\ngit log [-n count]\n</code></pre> <pre><code># How to see your commit history including changes in Git:\n# This command shows the commit's history including all files and their changes:\n\ngit log -p\n</code></pre> <pre><code># How to see minimal git log with commit id and message only:\n# This command list of commits with commit id and commit message.\n\ngit log --oneline\n</code></pre> <pre><code># display all commits from local and remote\ngit log --oneline --all\n</code></pre> <pre><code># List one commit per line (-n tag can be used to limit the number of commits displayed (e.g. -5))\ngit log --oneline [-n]\n</code></pre> <pre><code># Log commits after some date (A sample value can be 4th of October, 2020 - \"2020-10-04\" or keywords such as \"yesterday\", \"last month\", etc.)\ngit log --oneline --after=\"YYYY-MM-DD\"\n</code></pre> <pre><code># Log commits before some date (Both --after and --before tags can be used for date ranges)\ngit log --oneline --before=\"last year\"\n</code></pre> <pre><code># How to show the commit log as a graph in Git:\n# We can use `--graph `to get the commit log to show as a graph. Also,\n`--oneline` will limit commit messages to a single line.\n\ngit log --graph --oneline\n</code></pre> <pre><code># How to show the commit log as a graph of all branches in Git:\n# Does the same as the command above, but for all branches.\n\ngit log --graph --oneline --all\n</code></pre> <pre><code># --graph flag draws a text based graph of commits on left side of commit msgs. --decorate adds names of branches or tags of commits shown.\ngit log --graph --decorate\n</code></pre> <pre><code># An overview with reference labels and history graph. One commit per line.\ngit log --oneline --graph --decorate\n</code></pre> <pre><code># How to see log stats in Git:\n# This command will cause the Git log to show some statistics about the changes in each commit, including line(s) changed and file names.\n\ngit log --stat\n</code></pre> <pre><code># show all commit logs with indication of any paths that moved\ngit log --stat -M\n</code></pre> <pre><code># Search for commits with a commit message that matches &lt;pattern&gt;.\ngit log --grep=&lt;pattern&gt;\n</code></pre> <pre><code># How to check the current commits log of a remote repo in Git\n# Commit after commit, Git builds up a log. You can find out the remote repository log by using this command:\n\ngit log origin/main\n</code></pre> <pre><code># show the commits on branchA that are not on branchB\ngit log branchB..branchA\n</code></pre> <pre><code># show the commits that changed file, even across renames\n# Lists version history for a file, including renames\ngit log --follow [file]\n</code></pre> <pre><code># List commits that are present on the current branch and not merged into ref. A ref can be a branch name or a tag name.\ngit log ref .\n</code></pre> <pre><code># List commit that are present on ref and not merged into current branch.\ngit log .ref\n</code></pre> <pre><code># Lists version history for the current branch from certain author\ngit log --author=[name]\n</code></pre> <pre><code># Shows who changed what and when in file\ngit blame [file]\n</code></pre> <pre><code># List operations (e.g. checkouts or commits) made on local repository.\n# display all commits even the hidden ones\n# Show a log of changes to the local repository's HEAD.\n# Add --relative-date flag to show date info or --all to show all refs.\n\ngit reflog\n</code></pre>"},{"location":"git/modifying_files/","title":"modifying files","text":""},{"location":"git/modifying_files/#add-a-file-to-the-staging-area","title":"Add a file to the staging area","text":"<p>The command below will add a file to the staging area.  Just replace filename with the name of the file you want to add to the staging area.  </p><pre><code>git add fileName\n</code></pre> <p>How to add all files in the staging area in Git. If you want to add all files in your project to the staging area,  you can use a wildcard . and every file will be added for you. -all works the same  </p><pre><code>git add .\n</code></pre> <p>How to add only certain files to the staging area in Git  With the asterisk in the command below, you can add all files starting with 'fil' in the staging area.  </p><pre><code>git add fil*\n</code></pre> <p>How to see changes using <code>git add -p</code>:  This command opens a prompt and asks if you want to stage changes or not, and includes other options.  </p><pre><code>git add -p\n</code></pre>"},{"location":"git/modifying_files/#renameremove-file","title":"Rename/Remove file","text":"<p>How to remove tracked files from the current working tree in Git:  This command expects a commit message to explain why the file was deleted.  Remove file from working directory and staging area  Removes a file from both the working directory and the repository, staging the deletion.  </p><pre><code>git rm filename\n</code></pre> <p>remove git repo  </p><pre><code>git rm -rf .git/\n</code></pre> <p>How to rename files in Git:  This command stages the changes, then it expects a commit message.  Moves or renames a file or directory in your Git repository.  </p><pre><code>git mv oldfile newfile\n</code></pre>"},{"location":"git/modifying_files/#resetting-the-files","title":"Resetting the files","text":"<p>Discard changes [restore last commit to the working tree] </p><pre><code>git restore file-name\n</code></pre> <p>unstage files  </p><pre><code>git restore --staged file-name\n</code></pre> <p>Reset staging area to match most recent commit, but leave the working directory unchanged. </p><pre><code>git reset\n</code></pre> <p>Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory. </p><pre><code>git reset --hard\n</code></pre> <p>unstage a file while retaining the changes in working directory </p><pre><code>git reset [file]\n</code></pre> <p>Move the current branch tip backward to <code>commit</code>, reset the staging area to match, but leave the working directory alone. </p><pre><code>git reset &lt;commit&gt;\n</code></pre> <p>Undo the latest commit but leave the working directory unchanged to change version of file[ Moving between commits]. Change HEAD [retrieve commit to staging area] </p><pre><code>git reset HEAD~1\n</code></pre> <p>clear staging area, rewrite working tree from specified commit  Same as previous, but resets both the staging area &amp; working directory to match. Deletes uncommitted changes, and all commits after <code>commit</code>.  Moves the branch pointer to a specified commit, discarding all changes in the staging area and the working directory, effectively resetting the repository to the specified commit.  </p><pre><code>git reset --hard [commit]\n</code></pre> <p>Discard all changes of the latest commit (no easy recovery) [be carefull] </p><pre><code>git reset --hard HEAD~1\n</code></pre> <p>Switches the current branch to the target reference, leaving a difference as an uncommitted change. When <code>--hard</code> is used,  all changes are discarded. It's easy to lose uncommittedchanges with <code>--hard</code>. </p><pre><code>git reset [--hard] [target reference]\n</code></pre> <p>Moves the branch pointer to a specified commit, preserving the changes in the staging area and the working directory. </p><pre><code>git reset --soft &lt;commit&gt;\n</code></pre> <p>Instead of <code>HEAD~n</code>, you can provide commit hash as well. Changes after that commit will be destroyed  How to revert staged changes in Git:   You can use the -p option flag to specify the changes you want to reset.   </p><pre><code>git reset HEAD filename\ngit reset HEAD -p\n</code></pre>"},{"location":"git/project_status/","title":"project status","text":""},{"location":"git/project_status/#how-to-check-a-repositorys-status-in-git","title":"How to check a repository's status in Git:","text":"<p>This command will show the status of the current repository including staged, unstaged, and untracked files.  show modified files in working directory, staged for your next commit  </p><pre><code>git status\n</code></pre> <pre><code># for short brief\ngit status -s\n</code></pre> <pre><code># Displays ignored files in addition to the regular status output.\ngit status -ignored\n</code></pre>"},{"location":"git/project_status/#how-to-see-changes-made-before-committing-them-using-diff-in-git","title":"How to see changes made before committing them using \"diff\" in Git:","text":"<pre><code># You can pass a file as a parameter to only see changes on a specific file.\n# git diff shows only unstaged changes by default. Shows uncommitted changes since the last commit\n# diff of what is changed but not staged\n\ngit diff\ngit diff all_checks.py\n</code></pre> <pre><code># diff of what is staged but not yet commited, We can call diff with the --staged flag to see any staged changes.\ngit diff --staged\n</code></pre> <pre><code># Show difference between staged changes and last commit\ngit diff --cached\n</code></pre> <pre><code># Display the difference between the current directory and the last commit\ngit diff HEAD\n</code></pre> <pre><code># Show the differences between two commits (should provide the commit IDs)\ngit diff &lt;commit_id_1&gt; &lt;commit_id_2&gt;\n</code></pre> <pre><code># Compare a single &lt;file&gt; between two branches\ngit diff &lt;branch_1&gt; &lt;branch_2&gt; &lt;file&gt;\n</code></pre> <pre><code># show the diff of what is in branchA that is not in branchB\ngit diff branchB...branchA\n</code></pre> <pre><code># Show difference between working directory and last commit.\ngit diff HEAD\n</code></pre>"},{"location":"git/pull_and_synchronize/","title":"pull and synchronize","text":""},{"location":"git/pull_and_synchronize/#pull-changes-fetch-merge","title":"Pull changes (Fetch + Merge)","text":"<pre><code># If other team members are working on your repository, you can retrieve \n# the latest changes made to the remote repository with the command below\n# Fetch changes from the remote and merge current branch with its upstream.\n# Fetch the specified remote's copy of current branch and immediately merge it into the local copy.\n\ngit pull\n\n\n# Fetch the remote's copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches.\ngit pull --rebase &lt;remote&gt;\n</code></pre>"},{"location":"git/pull_and_synchronize/#synchronizing-repositories","title":"Synchronizing repositories","text":"<pre><code># Retrieves change from a remote repository, including new branches and commit.\ngit fetch\n\n# This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead).\n# Download all commits and branches from the remote without applying them on the local repo\n# Fetch changes from the remote, but not update tracking branches.\n\ngit fetch remote\n\n\n# Fetch changes from the remote but not merge with the working tree\ngit fetch remote-name\ngit fetch origin\n\n# Fetches a specific &lt;branch&gt;, from the repo. Leave off &lt;branch&gt; to fetch all remote refs.\ngit fetch &lt;remote&gt; &lt;branch&gt;\n\n\n# Delete remote Refs that were removed from the remote repository.\ngit fetch --prune [remote]\n\n# Only download the specified `branch` from the `remote`\ngit fetch &lt;remote&gt; &lt;branch&gt;\n\n# Merge the fetched changes if accepted\n# If the remote repository has changes you want to merge with your local, then this command will do that for you:\n\ngit merge &lt;remote&gt;/&lt;branch&gt;\ngit merge origin/main\n</code></pre>"},{"location":"git/push/","title":"push","text":""},{"location":"git/push/#push-changes","title":"Push changes","text":"<pre><code># How to push changes to a remote repo in Git:\n# When all your work is ready to be saved on a remote repository, you can push all changes using the command below:\ngit push\n\n# Push a copy of local branch named branch to the remote repo\ngit push &lt;remote_repo&gt; branch~\n\n# Delete a remote branch named branch (-d tag only works locally)\ngit push &lt;remote_repo&gt; :branch\ngit push &lt;remote_repo&gt; --delete branch\n\n# How to push a new branch to a remote repo in Git:\n# If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream\n# Push local branch to remote repository. Set its copy as an upstream.\n\ngit push -u origin branch_name\n\n\n# How to force a push request in Git: (-f flag or --force flag)\n# This command will force a push request. This is usually fine for pull request branches because nobody else should have cloned them.\n# But this isn't something that you want to do with public repos. Do not use the --force flag unless you're absolutely sure you know what you're doing.\n\ngit push -f origin branch_name\n\n\n# How to remove a remote branch in Git:\n# If you no longer need a remote branch you can remove it using the command below:\n\ngit push --delete origin branch_name_here\n\n\n# Push all of your local branches to the specified remote.\ngit push &lt;remote&gt; --all\n\n# Push local changes to the remote. Use --tags to push tags\n# Tags aren't automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo.\n\ngit push [--tags] [remote]\ngit push &lt;remote&gt; --tags\n</code></pre>"},{"location":"git/rebase/","title":"rebase","text":""},{"location":"git/rebase/#how-to-use-git-rebase-rewrite-history","title":"How to use Git rebase (REWRITE HISTORY)","text":"<pre><code># You can transfer completed work from one branch to another using git rebase\n# Apply commits of the current working branch and apply them to the HEAD of [branch] to make the history of your branch more linear\n# Rebase the current branch onto &lt;branch_name&gt;. &lt;branch_name&gt; can be a commit ID, branch name, a tag, or a relative reference to HEAD.\n# Reapplies commits on the current branch onto the tip of the specified branch.\n\ngit rebase branch_name\n\n# Git Rebase can get really messy if you don't do it properly. \n# Before using this command I suggest that you re-read the official documentation [here](https://git-scm.com/book/it/v2/Git-Branching-Rebasing)\n\n# How to run rebase interactively in Git. You can run git rebase interactively using the -i flag.\n# It will open the editor and present a set of commands you can use.\n# Interactively rebase current branch onto &lt;base&gt;. Launches editor to enter commands for how each commit will be transferred to the new base.\n\n# git rebase -i &lt;base&gt;\ngit rebase -i master\n\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n\n# There can be conflict while doing git rebase\n# Solve the conflicts like normal merge conflict, do git add and git rebase --continue\n</code></pre>"},{"location":"git/tagging/","title":"tagging","text":""},{"location":"git/tagging/#tagging-commits","title":"Tagging commits","text":"<pre><code># List all tags.\ngit tag\n\n# Create a tag reference named name for current commit. \n# Add commit sha to tag a specific commit instead of current one.\n\ngit tag [tag-name] [commit sha]\n\n\n# Create a tag object named name for current commit.\ngit tag -a [tag-name] [commit sha]\n\n# Remove a tag from local repository\ngit tag -d [tag-name]\n\n# Creates an annotated tag at the current commit with a custom message.\ngit tag -a &lt;tag-name&gt; -m &lt;message&gt;\n</code></pre>"},{"location":"linux/commands/","title":"commands","text":""},{"location":"linux/commands/#linux-most-used-commands-cheetsheet","title":"linux most used commands cheetsheet","text":"<pre><code>apt-get update &amp; apt-get upgrade -y\n</code></pre>"},{"location":"linux/commands/#user-management-commands-of-linux","title":"User management commands of linux","text":"<pre><code># sudo - execute a command as another user or with elevated privileges\n# Run command with the security privileges of the superuser (Super User DO)\n# Execute a command as another user, typically the superuser.\nsudo\n\n# whoami - display the current user name\nwhoami\n\n# Display who is logged in\nwho \n\n# Show the user you are logged in as and the groups you are part of\nid\n\n# Show the groups you are part of\ngroups\n\n# useradd - add a new user to the system, Create a new user account\nsudo useradd &lt;user-name&gt;\nsudo adduser &lt;user-name&gt; &lt;other-parameters&gt;\nsudo useradd harry\n\n# passwd - change the password for a user\nsudo passwd &lt;user-name&gt;\n\n# To change the password of a user\nsudo passwd -l &lt;user-name&gt;\n\n# To remove a newly created user\nsudo userdel -r &lt;user-name&gt;\n\n# userdel - delete a user from the system\nsudo userdel harry\n\n# To add a user to a group, Modify user account properties\nsudo usermod -a -G GROUPNAME USERNAME\n\n# To remove a user from a group\nsudo deluser USER GROUPNAME\n\n# su - switch user to become another user, \n# Substitute user identity to become superuser or another user.\nsu &lt;user-name&gt;\nsu john\n\n\n# finger - displays all the information about user\napt-get install finger\n\n# Shows information of all the users logged in\nfinger\n\n# Gives information of a particular user\nfinger &lt;user-name&gt;\n\n# to exit from a logged in shell\nexit\n</code></pre>"},{"location":"linux/commands/#information-about-a-program","title":"Information about a program","text":"<pre><code># which - locate a program or command in the system path\nwhich &lt;command-name&gt;\nwhich vim\n\nwhere &lt;command-name&gt;\nwhatis &lt;command-name&gt;\n\n# Find binary / source / manual for command\nwhereis &lt;command-name&gt;\n</code></pre> <pre><code># man - manual for a command\n# the synopsis section under man output gives the syntax of the command\nman &lt;command-name&gt;\nman ls\n# To navigate and search \nctrl + f\nctrl + b\ng\nG\n/string  -&gt; search\nh  -&gt; to display help\nq  -&gt; for quit\n\n# Search all man files for ifconfig\nman -k ifconfig\n\n# Search all man files for the sting in quotes\nman -k \"copy files\"\n</code></pre>"},{"location":"linux/commands/#screen-shortcut","title":"Screen shortcut","text":"<pre><code># Start a screen session.\nscreen\n\n# Resume a screen session.\nscreen -r\n\n# Show your current screen sessions.\nscreen -list\n\n# Activate commands for screen.\nCTRL-A\n\n# Create a new instance of terminal.\nCTRL-A c\n\n# Go to the next instance of terminal.\nCTRL-A n\n\n# Go to the previous instance of terminal.\nCTRL-A p\n\n# Show current instances of terminals.\nCTRL-A \"\n\n# Rename the current instance.\nCTRL-A A\n</code></pre> <pre><code># Clears the screen\nclear\n\n# Resets the terminal display\nreset\n\n# history - display a list of previously executed commands,\nhistory\n\n# Shows the stuff typed - add a number to limit the last n items\nhistory n\n\n!&lt;history-number-of-command&gt;\n!102\n\nHISTTIMEFORMAT=\"%Y-%m-%d %T \"\nadd this variable to .bashrc/.zshrc to make it permenant\n\n\n# Interactively search through previously typed commands\nctrl + r\n\n# to forward search (works in ZSH for me but not bash)\nctrl + s\n\n# Execute the last command typed that starts with 'value'\n![value]\n# Run last command starting with cd\n!cd\n\n# Print to the console the last command typed that starts with 'value'\n![value]:p\nPrint last command starting with cd\n!cd:p\n\n# execute previous command\n!!\n\n# Print to the console the last command typed\n!!:p\n\n# execute previous command in sudo mode\nsudo !!\n\n\n# Last argument of previous command\n!$\n\n# Last argument of previous command\nALT-.\n\n# All arguments of previous command\n!*\n\n# Run previous command, replacing abc with 123\n^abc^123\n\n\n\n# Bash Variables\n\n# Show environment variables\nenv\n\n# Output value of $NAME variable\necho $NAME\n\n# Create a new variable\nVARIABLE_NAME= value\n\n# Remove a variable\nunset\n\n# Set $NAME to value, to set value of an environment variable\nexport NAME=value\n\n# Executable search path\n$PATH\n\n# Home directory\n$HOME \n~\n\n# Current shell\n$SHELL\n\n# Remove a variable\nunset\n\n\n\n# Run command A and then B, regardless of success of A\n[command-a]; [command-b]\n\n# Run command B if A succeeded\n[command-a] &amp;&amp; [command-b]\n\n# Run command B if A failed\n[command-a] || [command-b]\n\n# Run command A in background, &amp; is to run the command in background\n[command-a] &amp;\n\n# Run command A and then pass the result to command B e.g ps auxwww | grep google\n[command-a] | [command-b]\n\n# stderr of cmd1 to cmd2\n[command-a] |&amp; [command-b]\n\n# Run cmd in a subshell\ncmd &amp;\n\n\n\n# Offers help\n[command] -h\n\n# Offers help\n[command] --help\n\n# Offers help\ninfo [command]\n\n# Show the help manual for [command]\nman [command]\n\n# Gives a one-line description of [command]\nwhatis [command]\n\n# Searches for command with keywords in description\napropos [search-pattern]\n\n\n# open line in the editor to write a command\nctrl + x then ctrl + e\n\n\n\n# matrix style animation in command line\ncmatrix\n\n# zoom in to the command prompt\nctrl +\n# zoom out in the command prompt\nctrl -\n</code></pre> <pre><code># ls - list the files and directories in the current directory\nls\n\n# in a list format, Long listing format\nls -l\nls -l &lt;file-name&gt;\n\n# Long listing of parent directory\nls -l ..\n\n# -a means files in the current directory including hidden files\nls -a\n\n# all files in list format\nls -al\n\n# Long listing with Human readable file sizes\nls -lh\n\n# Entire content of folder recursively\nls -R\n\n# Entire content of folder recursively in reverse order\nls -r\n\n# Sort by last modified\nls -t\n\n# sort by file size\nls -S\n\n# One file per line\nls -1\n\n# comma separated output\nls -m\n\n# Quoted output\nls -Q\n\n# list files in /etc\nls /etc\n# List files in the /var directory\nls -a /var/\n\n\n\n# tee - redirect output to both a file and the console\nls | tee file.txt\n</code></pre>"},{"location":"linux/commands/#traverse-directory","title":"Traverse directory","text":"<pre><code># pwd - print the current working directory\npwd\n\n# cd - change the current directory\n\n# go to Home directory\ncd\n\n# Change directory e.g. cd Documents\ncd [folder]\ncd /usr/bin\ncd /&lt;click-tab&gt;\n\n# go to Home directory\ncd ~\n\n# go to the root of drive\ncd /\n\n# go to the previous directory\ncd -\n\n# Move 1 levels up\ncd ..\n\n\n\n\npushd &lt;dir-name&gt;\npopd &lt;dir-name&gt;\n\n\n# root directory marker(#) and user directory marker(/)\n\n# . respresent Current folder, e.g. ls .\n# .. resposent Parent/enclosing directory, e.g. ls ..\n</code></pre> <pre><code># Opens a file ( as if you double clicked it )\nopen .\nxdg-open\n\n# Opens the file using the nano editor\nnano [file]\n\n# Opens the file using the vim editor\nvim [file]\n\n\n# touch - create a new empty file or update the timestamp of an existing file\ntouch &lt;file-name&gt;\ntouch shayan.txt\n\n# multiple files at one time\ntouch &lt;file-name-1&gt; &lt;file-name-2&gt;\n\n# create 10 files in a single go\ntouch &lt;file-name&gt;{0..10}\n\n# do not update anything just change the modified timestamp\ntouch &lt;already-existed-file&gt;\n\n\n\n\n\n# echo - display text or variables to the console\necho \"hello world\"\n\n# single arrow (&gt;) will override the content\necho \"hello world\" &gt; test.txt\n\n# double arrow (&gt;&gt;) will append the content\necho \"hello world\" &gt;&gt; test.txt\n\n\n\n\ntruncate -s 0 &lt;file-name&gt;\n\n# rm - remove files or directories\nrm &lt;file-name&gt;\n\n# -v for verbose\nrm -v &lt;file-name&gt;\nrm &lt;file-name-1&gt; &lt;file-name-2&gt;\nrm example.txt\n\n# -r for recusrive, delete directly and all its contents, Remove a directory and contents\nrm -r &lt;non-empty-dir&gt;\n\n# -i for interactive, Remove with confirmation\nrm -ri &lt;non-empty-dir&gt;\n\n# Force removal without confirmation\nrm -f [file]\n\n# this command will delete everything in the system\nrm -rf /\n\n\n# mkdir - create a new directory\nmkdir &lt;dir-name&gt;\n\n# Create a new directory called test\nmkdir test\n\n# -p will create all the nested folders if that is not present already, \nmkdir -p /dir1/dir2/dir3\n\n# Make directory and subdirectory in a single command\nmkdir -p test2/test2\n\n#  Make multiple directories\nmkdir test2 test3 \n\n\n\n\n# rmdir - Remove directory ( only operates on empty directories )\nrmdir &lt;dir-name&gt;\n\n# Deletes the text.txt file in the directory called test\nrmr test/text.txt\n\n\n# cp - copy files or directories, Copy file to directory\ncp [file] [dir]\ncp &lt;file-name&gt; &lt;file-name-with-path&gt;\n\n# Copies text.txt to a new file called text2.txt, Overwrites the existing text2.txt with a copy of text.txt\ncp [file] [newfile]\ncp text.txt text2.txt\n\n# copy dir-1 content to dir-1-copy folder, -r is needed as folder is not empty\ncp -r &lt;dir-1&gt; &lt;dir-1-copy&gt;\n\n\n# mv - move or rename files or directories, Move/Rename, e.g. mv file1.ad /tmp\nmv &lt;file-name&gt; &lt;file-name-with-path&gt;\n\n# Renames the file to a new filename\nmv [file] [new-filename]\nmv example.txt backup/\n\n# Moves text.txt to a different directory\nmv text.txt test/\n\n# Moves all txt files to a different directory\nmv *.txt test/\n\n\n\n# List all files and subfolders and files within subfolders within the test directory\ntree /etc\n\n\n\n# Divides the file into x columns\npr -x\n\n# Assigns a header to the file\npr -h\n\n# Denotes the file with Line Numbers\npr -n\n\n# Prints \"c\" copies of the File\nlp -nc , lpr c\n\n# Specifies name of the printer\nlp-d lp-P\n</code></pre> <pre><code># cat - concatenate and display files, Concatenate to screen\ncat &lt;file-name&gt;\ncat &lt;file-name&gt; | sort\ncat example.txt\ncat &lt;file-1&gt; &lt;file-2&gt; &lt;file-3&gt;\n\n# Creates a new file\ncat &gt; filename\n\n# Joins two files (file1, file2) and stores the output in a new file (file3)\ncat file1 file2 &gt; file3\n\ncat &lt;file-1&gt; &lt;file-2&gt; &lt;file-3&gt; &gt; &lt;file-name&gt;\n\n\n# Copies file contents to clipboard\npbcopy &lt; [file]\n\n# Paste clipboard contents\npbpaste\n\n# Paste clipboard contents into file, pbpaste &gt; paste-test.txt\npbpaste &gt; [file]\n\n\n# sort - sort lines of text in a file or input\ncat file.txt\n# banana\n# orange\n# apple\nsort file.txt\n# apple\n# banana\n# orange\n\nsort -n numeric-files # -n for numberic values\n\n\n# uniq - remove duplicate lines from a file or input\ncat file.txt\n# apple\n# orange\n# banana\n# apple\n# banana\nuniq file.txt\n# apple\n# orange\n# banana\n\n\n# Output file content delivered in screensize chunks\nless &lt;file-name&gt;\n\n# Get type of file1\nfile &lt;file-1&gt;\n\n\n# head/tail - display the first/last few lines of a file or input\n\n# display first 10 lines\nhead &lt;file-name&gt;\nhead -f &lt;file-name&gt;\nhead file.txt\n\n# Displays the first 10 lines of the file\nhead cloud-init.log\n\n# Displays the first 5 lines of the file\nhead -n 5 cloud-init.log\n\n# Show distribution\nhead -n1 /etc/issue\n\n\n# display last 10 lines\ntail &lt;file-name&gt;\n\n# Output last lines of file1 as it changes, follow the file\ntail -f &lt;file-name&gt;\n\n\ncmp &lt;file-name-1&gt; &lt;file-name-2&gt;\n\n# Compares the two text files\ndiff &lt;file-name-1&gt; &lt;file-name-2&gt;\n</code></pre>"},{"location":"linux/commands/#io-redirection","title":"IO Redirection","text":"<pre><code># Tell command to read content from a file, Input of cmd from file\n[command] &lt; [file]\n\n# Output of cmd2 as file input to cmd1\ncmd1 &lt;(cmd2)\n\n# Push output to file, keep in mind it will get overwritten, Standard output (stdout) of cmd to file\n[command] &gt; [file]\n\n# Append output to existing file, Append stdout to file\n[command] &gt;&gt; [file]\n\n# Discard stdout of cmd\ncmd &gt; /dev/null\n\n# Error output (stderr) of cmd to file\ncmd 2&gt; file\n\n# stdout to same place as stderr\ncmd 1&gt;&amp;2\n\n# stderr to same place as stdout\ncmd 2&gt;&amp;1\n\n# Every output of cmd to file\ncmd &amp;&gt; file\n</code></pre> <pre><code># find the files in a directory\nfind &lt;dir-name&gt; -name &lt;name-of-file&gt;\nfind /Users -name \"file.txt\"\nfind &lt;other-parameters&gt;\n\n# Find files starting with name in dir\nfind /dir/ -name name*\n\n# Find files owned by name in dir\nfind /dir/ -user name\n\n# Searches within /var and subdirectories\nfind /var -name *.log\n\n# Find files modifed less than num minutes ago in dir\nfind /dir/ -mmin num\n\n# locate - locate any file on the system, Find file (quick search of system index)\nlocate file.txt\n\n# Displays directory containing cloud-init.log\nlocate cloud-init.log\n\n# Displays directory containing cloud-init.log and ignores cas\nlocate -I cloud-init.log\n\n\n\n\n\n\n\n# Search for all lines that contain the pattern,\ngrep [search_pattern] [files]\ngrep \"Tom\" file.txt\n\n# Search for all lines that contain the case-insensitive pattern\ngrep -i [search_pattern] [file]\n\n# Recursively search in all files in specified directory for all lines that contain the pattern\ngrep -r [search_pattern] [dir]\n\n# Search for all lines that do NOT contain the pattern, Inverted search\ngrep -v [search_pattern] [file]\n\n# Search for all lines that do NOT contain the pattern\ngrep -v [search_pattern] [file]\n\n# Show matched part of file only\ngrep -o [search_pattern] [file]\n\n\n\n\n\n\n\n# Spotlight search for files (names, content, other metadata),\nmdfind [search_pattern]\nmdfind skateboard\n\n# Spotlight search for files named like pattern in the given directory\nmdfind -onlyin [dir] -name [pattern]\n</code></pre>"},{"location":"linux/commands/#file-permissions","title":"file permissions","text":"<pre><code># The first digit represents the owner of the file/directory\n# The second digit represents the group that the file/directory belongs to\n# The third digit represents all other users\n# 0 (no permission)\n# 1 (execute only)\n# 2 (write only)\n# 3 (write and execute)\n# 4 (read only)\n# 5 (read and execute)\n# 6 (read and write)\n# 7 (read, write, and execute)\n\n# r for read permission\n# w for write permission\n# x for execute permission\n# -= for no permission\n\n# chmod - change the permissions of a file or directory\nchmod &lt;file-name&gt; &lt;file-mod&gt;\nchmod +x &lt;file-name&gt;\nchmod 700 file.txt\n\n# Change mode of file to 775\nchmod 775 file\n\n# Recursively chmod folder to 600\nchmod -R 600 folder\n\n\n\n# chown - change the owner of a file or directory\nchown &lt;user-name&gt; &lt;file-name&gt;\n\n# Change file owner to user and group to group\nchown user:group file\n\n# change the user as well as group for a file or directory\nchown user:group filename\n\nchown new_owner example.txt\n</code></pre> <pre><code># Print or set system name.\nhostname\n\n# ifconfig - display or configure network interfaces, Display all network interfaces\nifconfig\n\nip address\nip address | grep eth0\nip address | grep eth0 | grep inet\nip address | grep eth0 | grep inet | awk '{print $2}\n</code></pre> <pre><code># ssh - connect to a remote server securely, Secure Shell client for remote login.\nssh username@ip-address\n\n# scp - securely copy files between systems\nscp myfile.txt user@remotehost:/home/user/\n\n# Display files in the current directory of a remote computer\ndir\n\n# change directory to \"dirname\" on a remote computer\ncd \"dirname\"\n\n# upload 'file' from local to remote computer\nput file\n\n# Download 'file' from remote to local computer\nget file\n\n# Logout\nquit\n</code></pre> <p>Networking command </p><pre><code># for dns\ncat /etc/resolv.conf\nresolvectl status\n\n\n# ping - test network connectivity, Test the destination at 8.8.8.8 by sending ICMP packets\nping &lt;ip-address&gt;\nping 8.8.8.8\n\n# Test the destination at 8.8.8.8 by sending five ICMP packets\nping -c 5 8.8.8.8\n\n\n# Print the route packets take to network host.\ntraceroute &lt;url&gt;\n\n\n# netstat - display network connection information\n# Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.\nnetstat\nnetstat -tulpn\n\n#  Display the route table\nnetstat -r\n\n# isplay open connections for a specific port\nnetstat -np | grep \"80\"\n\nss \nss -tulpn\n\n\n# route - view or configure network routing tables\n# Show or manipulate the IP routing table.\nroute [options] [add/delete/show]\n\n\n# allow port 80 to the system\nsudo ufw allow 80\nsudo ufw enable\nsudo ufw status\n\n\nwget &lt;downloadable-url&gt;\n\ncurl &lt;url&gt;\ncurl &lt;downloadable-url&gt; &gt; &lt;file-name&gt;\n</code></pre> <pre><code># uname - display system information\nuname\nuname -r\n\n# Show system and kernel\nuname -a\n</code></pre> <pre><code># Gives free RAM on your system\nfree\n</code></pre> <pre><code># df - display disk space usage, free space on storage devices\ndf\ndf -H\n\n# du - display disk usage by file or directory\ndu\n\n# Display file or file system status\nstat\n\n# mount - mount a file system\n# Show mounted filesystems\nmount\nmount | column -t\nsudo mount /dev/sdb1 /mnt/usb\n\n# umount - unmount a file system\nsudo umount /mnt/usb\n</code></pre>"},{"location":"linux/commands/#process-command","title":"Process command","text":"<pre><code># ps - display information about running processes\n# Show snapshot of processes\nps\nps aux\n\n# Gives the status of a particular process\nps PID\n\n# To send a process to the background\nbg\n\n# To run a stopped process in the foreground\nfg\n\n# Display current jobs\njobs\n\n# Run a command immune to hangups.\nnohup\n\n# Gives the Process ID (PID) of a process\npidof\n\n\n# Starts a process with a given priority\nnice\n\n# Changes priority of an already running process\nrenice\n\n\n# top - display system resource usage and processes, Displays active processes. Press q to quit\n# Show real time processes\ntop\n\n# htop - an interactive process viewer and system monitor in a human readable format\nhtop\n\n# kill - terminate a process\nkill [PID]\n\n# kill can take different flags, -9 is for SIGKILL, -15 is for SIGTERM\n# -9 for forcefull termination, -15 is for gracefull shutdown\nkill -9 &lt;process-id&gt;\nkill -15 &lt;process-id&gt;\n\n# -l to list all the flags\nkill -l\n\n# Kill process with name name\npkill &lt;process-name&gt;\n\n# Kill process with name name with forcefully\npkill -f &lt;process-name&gt;\n\n# Kill all processes with names beginning name\nkillall\n</code></pre> <pre><code># tar create or extract compressed archive files\n# x: extract files from an archive\n# t: list the contents of an archive\n# r: append files to an existing archive\n# z: use gzip compression\n# j: use bzip2 compression\n# cf: create file\n# xf: extract file\ntar cf archive.tar file1 file2 file3\n\nzip &lt;zip-file-name&gt; &lt;content-file-or-folder&gt;\nunzip &lt;zip-file-name&gt;\n\n\n# gzip - compress files\ngzip file.txt\n\n# gunzip - decompress compressed files\ngunzip file.txt.gz\n</code></pre> <pre><code># systemctl - control system services and settings\n\n# Start the nginx service\nsudo systemctl start &lt;service-name&gt;\n\n# Check the status of the nginx service\nsudo systemctl status &lt;service-name&gt;\n\n# Stop the nginx service\nsudo systemctl stop &lt;service-name&gt;\n\n\nsystemctl start nginx\nsystemctl status nginx\nsystemctl stop nginx\n\n\n# service - control system serv\nservice apache2 start\n</code></pre> <pre><code># uptime - display system uptime and load average\nuptime\n\nsudo reboot\nsudo shutdown -h now\n\n\n# date - display or set the system date and time\ndate\n</code></pre> <pre><code>neofetch\n</code></pre> <pre><code># edit the ~/.bash_prompt to create custom prompt in command line\n# find the sample prompt here https://www.learnlinux.tv/10-linux-terminal-tips-and-tricks-to-enhance-your-workflow/\n# add that into .bashrc/.zshrc and comment out the PS1 command \n# add the source ~/.bash_prompt\n</code></pre> <pre><code># Sed command is mostly used to replace the text in a file\nsed &lt;pattern-or-text&gt; &lt;file-name&gt;\n\necho 'Hello, world!' | sed 's/world/universe'   =&gt; Hello, universe!\n\n\n# search in a text or file\n# Displays any lines of the file ssh_config that include the term user\ngrep user /etc/ssh/ssh_config\n\n# Use quotes if the string has spaces, -i option: Ignore upper/lower case\ngrep -i \"COMMAND LINE\" /etc/ssh/ssh_config\n\n# Search all files in the etc directory\ngrep -R 127.0.0.1 /etc/\n\n# Sends search results to a text file\ngrep user /etc/ssh/ssh_config &gt; sample.txt\nls | grep crontab\n\n\n\n# run in every 2 second\nwatch &lt;command-name&gt;\n\nawk\n\nsed\n\nrsync\n</code></pre> <p>ln: Create links between files. wc: Count words, lines, and characters in a file pstree: Display a tree of processes. hostname: Print or set system name.</p> <p>screen: Terminal multiplexer with detach and reattach capabilities. tmux: Terminal multiplexer similar to screen.</p>"},{"location":"linux/commands/#text-editing-and-manipulation","title":"Text Editing and Manipulation:","text":"<p>nano: Basic text editor. vim: Advanced text editor. emacs: Another powerful text editor. sed: Stream editor for filtering and transforming text. awk: Pattern scanning and text processing language. cut: Extract sections from each line of files. paste: Merge lines of files. sort: Sort lines of text files. uniq: Report or filter out repeated lines in a file. tr: Translate or delete characters. tee: Read from standard input and write to standard output and files simultaneously.</p>"},{"location":"linux/commands/#file-transfer-and-networking","title":"File Transfer and Networking:","text":"<p>scp: Securely copy files between hosts. rsync: Remote file synchronization utility. wget: Retrieve files from the web using HTTP, HTTPS, and FTP. curl: Transfer data with URLs. ssh-keygen: Generate SSH keys for secure authentication. ssh-copy-id: Copy SSH keys to a remote server's authorized_keys file.</p>"},{"location":"linux/commands/#miscellaneous","title":"Miscellaneous:","text":"<p>history: Display command history. alias: Create command aliases. watch: Execute a program periodically, showing output fullscreen. man: Display the manual pages for commands.</p>"},{"location":"linux/links/","title":"links","text":""},{"location":"linux/links/#linux","title":"Linux","text":""},{"location":"linux/links/#udemy","title":"Udemy","text":"<ul> <li>introduction</li> <li>Linux for Beginners</li> <li>Complete Linux Training Course to Get Your Dream IT Job</li> <li>Mastering Linux: The Comprehensive Guide</li> <li>terminal commands</li> <li>Linux Command Line Basics</li> <li>Learn Linux in 5 Days and Level Up Your Career</li> <li>Linux Mastery: Master the Linux Command Line in 11.5 Hours</li> <li>The Linux Command Line Bootcamp: Beginner To Power User</li> </ul>"},{"location":"linux/links/#websites","title":"websites","text":"<ul> <li>terminal commands</li> <li>terminal-mac-cheatsheet</li> <li>cheatography</li> <li>guru99</li> <li>Keyboard shortcuts in Terminal on Mac</li> </ul>"},{"location":"linux/links/#youtube","title":"youtube","text":"<ul> <li>origin</li> <li>Why Linux Rules the Data Center</li> <li>Why so many distros? The Weird History of Linux</li> <li>The Secret OS That Really Runs The World</li> <li>The Making of GNU: The World's First Open-Source Software</li> <li>The Making of Linux: The World's First Open-Source Operating System</li> <li>Linux: The Origin Story</li> <li>The mind behind Linux | Linus Torvalds | TED</li> <li> <p>Even Microsoft Uses Linux, So Why Don't We??</p> </li> <li> <p>introduction</p> </li> <li>The 5 Things That Taught Me The Most About Linux</li> <li>5 Common Mistakes New Linux Users Often Make</li> <li>New Linux User: 10 Things I Wish I Knew When I First Started</li> <li>10 Typical Linux Problems and How to Fix Them</li> <li>Why Linux Is Better For Programming</li> <li>Why Linux is better for (most) developers!</li> <li>Why I Code on Linux Instead of Windows</li> <li>10 ways Linux is just better!</li> <li> <p>10 Things I Wish I Knew When I First Started With Linux</p> </li> <li> <p>freecodecamp series</p> </li> <li>Linux Operating System - Crash Course for Beginners</li> <li>The 50 Most Popular Linux &amp; Terminal Commands - Full Course for Beginners<ul> <li>The Linux Command Handbook - Learn Linux Commands for Beginners</li> </ul> </li> <li>Introduction to Linux - Full Course for Beginners<ul> <li>Bash Scripting Tutorial - Linux Shell Script and Command Line for Beginners</li> </ul> </li> <li>Linux Server Course - System Configuration and Operation<ul> <li>How to Configure and Operate Linux Servers - Full Course</li> </ul> </li> <li> <p>Linux Device Drivers Development Course for Beginners</p> </li> <li> <p>terminal commands</p> </li> <li>Become a shell wizard in ~12 mins</li> <li>Unleash the Power of These 6 Linux Commands - Say Goodbye to Boring Terminal Screens</li> <li>Linux commands : Clear your Linux Basics in 25 min for beginners</li> <li>18 Commands That Will Change The Way You Use Linux Forever</li> <li>60 Linux Commands you NEED to know (in 10 minutes)</li> <li> <p>50 Linux Commands Every Developer Must Know</p> </li> <li> <p>Linux Command-Line Tips &amp; Tricks</p> </li> <li>Linux Command-Line Tips &amp; Tricks: Over 15 Examples!</li> <li> <p>10 Linux Terminal Tips and Tricks to Enhance Your Workflow</p> </li> <li> <p>Linux filesystem</p> </li> <li>How Does Linux Boot Process Work?</li> <li>Linux Directories Explained in 100 Seconds</li> <li>Linux File System/Structure Explained!</li> <li> <p>The Linux Filesystem Explained | How Each Directory is Used</p> </li> <li> <p>different linux distributions</p> </li> <li>you need to learn Virtual Machines RIGHT NOW!! (Kali Linux VM, Ubuntu, Windows)<ul> <li>Virtual Machines Pt. 2 (Proxmox install w/ Kali Linux)</li> </ul> </li> <li>Switching to Linux</li> <li>Choosing the Right Linux Distro</li> <li>Kali Linux on Windows in 5min (WSL 2 GUI)</li> <li>The Linux Tier List</li> <li>Ranking Linux Distributions for 2023: not your average tier list!</li> <li> <p>You Only NEED 3 Linux Distributions</p> </li> <li> <p>series</p> </li> <li>Linux Essential Tools</li> <li>Linux Commands for Beginners</li> <li>Linux Crash Course</li> <li>Full Guides</li> <li> <p>Top Docs | Learn the Basics</p> </li> <li> <p>others</p> </li> <li> <p>Unix Domain Socket in 100 seconds</p> </li> <li> <p>command line tools for improving productivity</p> </li> <li>5 Command Line Tools That Boost Developer Productivity (2023)</li> </ul>"},{"location":"linux/others/","title":"others","text":""},{"location":"linux/others/#other-resources","title":"Other resources","text":""},{"location":"linux/others/#table-of-contents","title":"Table of contents","text":""},{"location":"linux/others/#linux-vm-in-your-own-system","title":"Linux VM in your own system","text":""},{"location":"linux/others/#command-to-start-the-wsl-2-from-windows","title":"Command to start the wsl 2 from windows","text":"<pre><code>wsl --set-default-version 2\nsudo apt-get update &amp;&amp; sudo apt-get upgrade -y\nsudo apt install xrdp -y\nsudo service xrdp start\nip add\n</code></pre>"},{"location":"linux/others/#ubuntu-server-for-arm","title":"Ubuntu Server for ARM","text":""},{"location":"linux/others/#setup-ubuntu-server-in-utm","title":"Setup ubuntu server in UTM","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install ubuntu-desktop\nsudo reboot\n\n# for directory sharing between host os and guest os (127.0.0.1:9843)\nsudo apt install spice-vdagent spice-webdavd -y \n\n# https://docs.getutm.app/guest-support/linux/\nsudo mkdir -p /media/shared\nsudo mount -t 9p -o trans=virtio share /media/shared -oversion=9p2000.L\n# You can also modify `sudo vi /etc/fstab` and add the following line to automatically mount the share on startup\nshare   /media/shared   9p  trans=virtio,version=9p2000.L,rw,_netdev,nofail 0   0\nsudo chown -R $USER /media/shared\n</code></pre>"},{"location":"linux/others/#steps-for-creating-my-personalised-vm-in-mac","title":"Steps for creating my personalised VM in mac","text":"<ul> <li>Create the VM from ubuntu image [[linux]]</li> <li>Add git ssh keys</li> <li>Add vm user name host in your ~/.ssh/config</li> <li>Setup ssh agent on vscode<ul> <li>Linux VMs on an M1-based Mac with VScode and UTM</li> </ul> </li> <li>Download and set zsh</li> <li>Install luajit then install neovim by luajit</li> </ul>"},{"location":"shortcuts/command-line/","title":"command line","text":""},{"location":"shortcuts/command-line/#shortcuts","title":"Shortcuts","text":""},{"location":"shortcuts/command-line/#shell-shortcuts","title":"Shell shortcuts","text":"<pre><code># kill active process, stops the current in-progress command\n# Kill whatever you are running. Also clears everything on current line\nctrl + c\n\n# Exit the current shell when no process is running, or send EOF to a the running process\nctrl + d\n\n\n# minimize/suspend the current process and come back to the terminal, put process in background\nctrl + z\n\n# reopen the background process, foreground\nfg\n\n# list of background jobs\nbg\n\n# show the current jobs\njob\n\n\n# Up arrow shows previous commands\n\n\n# clear your screen\nctrl + l / cmd + k\n\n\n# Tab automatically completes commands\n\n\n# set the cursor to the first letter/start in the command line, go to front of the line\nctrl + a\n\n# set the cursor to the last letter/end in the command line, go to end of the line\nctrl + e\n\n# go forward one character\nctrl + f\n\n# go backword one character\nctrl + b \n\n# Move cursor one word forward, jump forward by one word\nalt + f   /   Option + \u2192\n\n# Move cursor one word backward, jump backward by one word\nalt + b   /   Option + \u2190\n\n\n\n# Swap the last two characters before the cursor (not working in mac, it is showing a list of files as fuzzy finder)\nctrl + t\n\n# Swap the last two words before the cursor\nesc + t\n\n\n\n# Cut everything backwards to beginning of line, delete the line in the command prompt\nctrl + u\n\n# to remove the word backwards from cursor position\nctrl + w\n\n# Cut one word backwards using none alphabetic characters as delimiters\nesc + backspace\n\n# Cut everything forward to end of line, to delete the line starting from the cursor position\nctrl + k \n\n# to delete a word starting from the current cursor position\nalt + d\n\n# delete one character\nctrl + h\n\n# Paste whatever was cut by the last cut command, to paste text from the kill buffer\nctrl + y\n\n# Undo the last command. (Underscore. So it's actually Ctrl + Shift + minus)\nctrl + _  (Ctrl + Shift + minus)\n</code></pre>"},{"location":"shortcuts/command-line/#iterm2-shortcuts","title":"Iterm2 shortcuts","text":"<pre><code># create a new tab zsh terminal \ncmd + t\n\n# switch tab in zsh terminal\nctrl + tab    /      ctrl + shift + tab\ncmd + left arraow  /   cmd + right arrow\ncmd + shift + [     /    cmd + shift + ]\n\n# split the window horizonatally in zsh terminal\ncmd + d\n\n# split the window vertically in zsh terminal\ncmd + shift + d\n\nswitch between splitted tabs \ncmd + [    /     cmd + ]\n\n# close the current tab in zsh terminal\ncmd + w\n</code></pre>"},{"location":"shortcuts/command-line/#mac-terminal-helper","title":"mac terminal helper","text":""},{"location":"shortcuts/command-line/#work-with-terminal-windows-and-tabs","title":"Work with Terminal windows and tabs","text":"<pre><code># New window\ncmd + n\n\n# exit a window\nexit\n\n# New window with same command\nControl-Command-N\n\n# New tab\ncmd + t\n\n# New tab with same command\nControl-Command-T\n\n# Show or hide tab bar\nShift-Command-T\n\n# Show all tabs or exit tab overview\nShift-Command-Backslash (\\)\n\n# New command\nShift-Command-N\n\n# New remote connection\nShift-Command-K\n\n# Show or hide Inspector\nCommand-I\n\n# Edit title\nShift-Command-I\n\n# Edit background colour\nOption-Command-I\n\n# Make fonts bigger\nCommand-Plus (+)\n\nMake fonts smaller\n\nCommand-Minus (-)\n\nNext window\n\nCommand-Grave Accent (`)\n\nPrevious window\n\nCommand-Shift-Tilde (~)\n\nNext Tab\n\nControl-Tab\n\nPrevious Tab\n\nControl-Shift-Tab\n\nSplit window into two panes\n\nCommand-D\n\nClose split pane\n\nShift-Command-D\n\nClose tab\n\nCommand-W\n\nClose window\n\nShift-Command-W\n\nClose other tabs\n\nOption-Command-W\n\nClose all\n\nOption-Shift-Command-W\n\nScroll to top\n\nCommand-Home\n\nScroll to bottom\n\nCommand-End\n\nPage up\n\nCommand-Page Up\n\nPage down\n\nCommand-Page Down\n\nLine up\n\nOption-Command-Page Up\n\nLine down\n\nOption-Command-Page Down\n</code></pre>"},{"location":"shortcuts/command-line/#edit-a-command-line","title":"Edit a command line","text":"<pre><code>Reposition the insertion point\n\nPress and hold the Option key while moving the pointer to a new insertion point\n\nMove the insertion point to the beginning of the line\n\nControl-A\n\nMove the insertion point to the end of the line\n\nControl-E\n\nMove the insertion point forwards one character\n\nRight Arrow\n\nMove the insertion point backwards one character\n\nLeft Arrow\n\nMove the insertion point forwards one word\n\nOption-Right Arrow\n\nMove the insertion point backwards one word\n\nOption-Left Arrow\n\nDelete the line\n\nControl-U\n\nDelete to the end of the line\n\nControl-K\n\nDelete forwards to the end of the word\n\nOption-D (available when Use Option as Meta key is selected)\n\nDelete backwards to the beginning of the word\n\nControl-W\n\nDelete one character\n\nDelete\n\nForward-delete one character\n\nForward Delete (or use Fn-Delete)\n\nTranspose two characters\n\nControl-T\n</code></pre>"},{"location":"shortcuts/command-line/#select-and-find-text-in-a-terminal-window","title":"Select and find text in a Terminal window","text":"<pre><code>Action\n\nShortcut\n\nSelect a complete file path\n\nPress and hold the Shift and Command keys and double-click the path\n\nSelect a complete line of text\n\nTriple-click the line\n\nSelect a word\n\nDouble-click the word\n\nSelect a URL\n\nPress and hold the Shift and Command keys and double-click the URL\n\nSelect a rectangular block\n\nPress and hold the Option key and drag to select text\n\nCut\n\nCommand-X\n\nCopy\n\nCommand-C\n\nCopy without background colour\n\nControl-Shift-Command-C\n\nCopy plain text\n\nOption-Shift-Command-C\n\nPaste\n\nCommand-V\n\nPaste the selection\n\nShift-Command-V\n\nPaste escaped text\n\nControl-Command-V\n\nPaste escaped selection\n\nControl-Shift-Command-V\n\nFind\n\nCommand-F\n\nFind next\n\nCommand-G\n\nFind previous\n\nCommand-Shift-G\n\nFind using the selected text\n\nCommand-E\n\nJump to the selected text\n\nCommand-J\n\nSelect all\n\nCommand-A\n\nOpen the character viewer\n\nControl-Command-Space\n</code></pre>"},{"location":"shortcuts/command-line/#work-with-marks-and-bookmarks","title":"Work with marks and bookmarks","text":"<pre><code>Mark\n\nCommand-U\n\nMark as bookmark\n\nOption-Command-U\n\nUnmark\n\nShift-Command-U\n\nMark line and send return\n\nCommand-Return\n\nSend return without marking\n\nShift-Command-Return\n\nInsert bookmark\n\nShift-Command-M\n\nInsert bookmark with name\n\nOption-Shift-Command-M\n\nJump to previous mark\n\nCommand-Up Arrow\n\nJump to next mark\n\nCommand-Down Arrow\n\nJump to previous bookmark\n\nOption-Command-Up Arrow\n\nJump to next bookmark\n\nOption-Command-Down Arrow\n\nClear to previous mark\n\nCommand-L\n\nClear to previous bookmark\n\nOption-Command-L\n\nClear to start\n\nCommand-K\n\nSelect between marks\n\nShift-Command-A\n</code></pre>"},{"location":"shortcuts/command-line/#other-shortcuts","title":"Other shortcuts","text":"<pre><code>Enter or exit full screen\n\nControl-Command-F\n\nShow or hide colours\n\nShift-Command-C\n\nOpen Terminal settings\n\nCommand-Comma (,)\n\nBreak\n\nTyping Command-Full Stop (.) is equivalent to entering Control-C on the command line\n\nPrint\n\nCommand-P\n\nSoft reset terminal emulator state\n\nOption-Command-R\n\nHard reset terminal emulator state\n\nControl-Option-Command-R\n\nOpen a URL\n\nHold down the Command key and double-click the URL\n\nAdd the complete path to a file\n\nDrag the file from the Finder into the Terminal window\n\nExport text as\n\nCommand-S\n\nExport selected text as\n\nShift-Command-S\n\nReverse search command history\n\nControl-R\n\nToggle \"Allow Mouse Reporting\" option\n\nCommand-R\n\nToggle \"Use Option as Meta Key\" option\n\nCommand-Option-O\n\nShow alternate screen\n\nShift-Command-Down Arrow\n\nHide alternate screen\n\nShift-Command-Up Arrow\n\nOpen man page for selection\n\nControl-Shift-Command-Question Mark (?)\n\nSearch man page index for selection\n\nControl-Option-Command-Slash (/)\n\nComplete directory or file name\n\nOn a command line, type one or more characters, then press Tab\n\nDisplay a list of possible directory or file name completions\n\nOn a command line, type one or more characters, then press Tab twice\n</code></pre>"},{"location":"shortcuts/tmux/","title":"tmux","text":""},{"location":"shortcuts/tmux/#tmux-configurations","title":"tmux configurations","text":""},{"location":"shortcuts/tmux/#tmux-loads-all-the-configs-from-the-tmuxconf","title":"tmux loads all the configs from the ~/.tmux.conf","text":""},{"location":"shortcuts/tmux/#first-install-tumx-in-either-linux-distribution-or-in-mac","title":"first install tumx in either linux distribution or in mac","text":""},{"location":"shortcuts/tmux/#then-install-tpm-or-the-tmux-plugin-manager","title":"then install tpm or the tmux plugin manager","text":"<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n\n# Put this at the bottom of ~/.tmux.conf\n# List of plugins\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun '~/.tmux/plugins/tpm/tpm'\n</code></pre> <p>Reload TMUX environment so TPM is sourced: </p><pre><code># type this in terminal if tmux is already running\ntmux source ~/.tmux.conf\n</code></pre>"},{"location":"shortcuts/tmux/#installing-plugins","title":"Installing plugins","text":"<pre><code>Add new plugin to ~/.tmux.conf with set -g @plugin '...'\nPress prefix + I (capital i, as in Install) to fetch the plugin.\nYou're good to go! The plugin was cloned to ~/.tmux/plugins/ dir and sourced.\n</code></pre>"},{"location":"shortcuts/tmux/#uninstalling-plugins","title":"Uninstalling plugins","text":"<pre><code>Remove (or comment out) plugin from the list.\nPress prefix + alt + u (lowercase u as in uninstall) to remove the plugin.\nAll the plugins are installed to ~/.tmux/plugins/ so alternatively you can find plugin directory there and remove it.\n</code></pre>"},{"location":"shortcuts/tmux/#key-bindings","title":"Key bindings","text":"<pre><code>&lt;leader&gt; I              -&gt;      Installs new plugins from GitHub or any other git repository and refreshes TMUX environment\n&lt;leader&gt; U              -&gt;      updates plugin(s)\n&lt;leader&gt; alt u          -&gt;      remove/uninstall plugins not on the plugin list\n</code></pre>"},{"location":"shortcuts/tmux/#some-tmux-commands","title":"Some tmux commands","text":"<pre><code>ctrl + s                -&gt;      the leader key\ntmux                    -&gt;      to open tmux\n&lt;leader&gt; :              -&gt;      for opening a command mode in tmux\n\n&lt;leader&gt; %              -&gt;      to split a pane in half vertically\n&lt;leader&gt; \"              -&gt;      to split a pane in half horizontally\n&lt;leader&gt; {arraow key}   -&gt;      to go to different panes\n&lt;leader&gt; {              -&gt;      to move the current pane into a different pane\n&lt;leader&gt; }              -&gt;      to move the current pane into a different pane\n&lt;leader&gt; &lt;space&gt;        -&gt;      to toggle between different built in pane layouts\n&lt;leader&gt; x              -&gt;      to kill the current pane\n&lt;leader&gt; z              -&gt;      to toogle full screen of a pane\n\n&lt;leader&gt; c              -&gt;      for creating a new window\n&lt;leader&gt; p              -&gt;      for going to the previous window\n&lt;leader&gt; n              -&gt;      for going to the next window\n:rename-window  &lt;name&gt;  -&gt;      for renaming the window\n&lt;leader&gt; w              -&gt;      we can see the list of windows in a session\n&lt;leader&gt; &amp;              -&gt;      to kill the current window\n\n&lt;leader&gt; d              -&gt;      for detaching the current session\ntmux list-sessions      -&gt;      list all the sessions\ntmux ls                 -&gt;      list all the sessions\ntmux attach             -&gt;      attach to the last active session\ntmux detach             -&gt;      detach from the current session\ntmux                    -&gt;      open a new session\n&lt;leader&gt; s              -&gt;      we can see all the sessions in tmux\n:rename-session         -&gt;      rename a session\n:kill-session           -&gt;      kill current session\n</code></pre>"},{"location":"shortcuts/typing/","title":"typing","text":""},{"location":"shortcuts/typing/#typing-speed-checker-websites","title":"typing speed checker websites","text":"<ul> <li>typing-lessons</li> <li>typingclub</li> <li>monkeytype</li> <li>10fastfingers</li> <li>typingtest</li> <li>keybr</li> <li>typeracer</li> </ul>"},{"location":"shortcuts/typing/#shortcuts","title":"Shortcuts","text":"<pre><code># delete the entire previous word \noption + backspace for mac\nctrl + backspace for others\n\n# delete the entire line \ncmd + backspace for mac\n</code></pre> <pre><code># finger rest at the position\nleft hand at asdf\nright hand jkl;\ntwo thumbs at the space bar\n</code></pre>"}]}